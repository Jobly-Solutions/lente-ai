// ========================================
// FINAL BRAVILO UPLOAD
// Ejecutar: node final-bravilo-upload.js
// ========================================

require('dotenv').config({ path: '.env.local' });

console.log('üöÄ FINAL BRAVILO UPLOAD...\n');

// Configuraci√≥n de la API de Bravilo
const BRAVILO_API_URL = process.env.BRAVILO_BASE_URL || 'https://app.braviloai.com/api';
const BRAVILO_TOKEN = process.env.BRAVILO_API_KEY;

if (!BRAVILO_TOKEN) {
    console.log('‚ùå ERROR: BRAVILO_API_KEY no est√° configurado en .env.local');
    process.exit(1);
}

// Funci√≥n para hacer requests a la API de Bravilo
async function braviloRequest(endpoint, method = 'GET', data = null) {
    const url = `${BRAVILO_API_URL}${endpoint}`;
    const headers = {
        'Authorization': `Bearer ${BRAVILO_TOKEN}`,
        'Content-Type': 'application/json'
    };

    const options = {
        method,
        headers,
        ...(data && { body: JSON.stringify(data) })
    };

    console.log(`üîó ${method} ${url}`);
    if (data) {
        console.log(`üì¶ Payload: ${JSON.stringify(data, null, 2)}`);
    }

    try {
        const response = await fetch(url, options);
        const responseText = await response.text();
        
        let responseData;
        try {
            responseData = JSON.parse(responseText);
        } catch (e) {
            console.log(`‚ö†Ô∏è  Response is not JSON: ${responseText.substring(0, 200)}...`);
            responseData = { message: responseText };
        }

        console.log(`üì• Response Status: ${response.status}`);
        console.log(`üì• Response: ${JSON.stringify(responseData, null, 2)}`);

        if (!response.ok) {
            throw new Error(`API Error: ${response.status} - ${responseData.message || response.statusText}`);
        }

        return responseData;
    } catch (error) {
        console.error(`‚ùå Error en request a ${endpoint}:`, error.message);
        throw error;
    }
}

// Funci√≥n para listar datastores
async function listDatastores() {
    console.log('üìã Listando datastores...');
    
    try {
        const datastores = await braviloRequest('/datastores');
        console.log(`‚úÖ Encontrados ${datastores.length} datastores:`);
        
        datastores.forEach((datastore, index) => {
            console.log(`   ${index + 1}. ${datastore.name} (${datastore.id})`);
            console.log(`      Tipo: ${datastore.type}`);
            console.log(`      Visibilidad: ${datastore.visibility}`);
            console.log(`      Datasources: ${datastore._count?.datasources || 0}`);
            console.log(`      Descripci√≥n: ${datastore.description || 'Sin descripci√≥n'}`);
            console.log('');
        });
        
        return datastores;
    } catch (error) {
        console.log('‚ùå Error listando datastores:', error.message);
        return [];
    }
}

// Datos completos de Lente AI
const lenteAIData = [
    {
        id: "lente_company_overview",
        content: "Lente AI es una empresa l√≠der en consultor√≠a de inteligencia artificial. Ofrecemos soluciones personalizadas para empresas que buscan implementar IA en sus procesos de negocio. Nuestra misi√≥n es democratizar el acceso a la inteligencia artificial para organizaciones de todos los tama√±os.",
        metadata: {
            source: "company_overview",
            category: "Empresa",
            company: "Lente AI",
            type: "descripci√≥n_general"
        }
    },
    {
        id: "lente_services",
        content: "Nuestros servicios incluyen: consultor√≠a en IA, desarrollo de chatbots, an√°lisis de datos, automatizaci√≥n de procesos, implementaci√≥n de soluciones de machine learning, optimizaci√≥n de modelos de IA, procesamiento de lenguaje natural, visi√≥n por computadora, y estrategias de transformaci√≥n digital.",
        metadata: {
            source: "services_list",
            category: "Servicios",
            company: "Lente AI",
            type: "lista_servicios"
        }
    },
    {
        id: "lente_contact",
        content: "Para contactar con Lente AI: Email: info@lenteai.com, Tel√©fono: +1-555-0123, Sitio web: www.lenteai.com, Direcci√≥n: Calle Principal 123, Ciudad, Pa√≠s. Horario de atenci√≥n: Lunes a Viernes de 9:00 AM a 6:00 PM.",
        metadata: {
            source: "contact_info",
            category: "Contacto",
            company: "Lente AI",
            type: "informaci√≥n_contacto"
        }
    },
    {
        id: "lente_expertise",
        content: "Lente AI cuenta con un equipo de expertos en machine learning, procesamiento de lenguaje natural, visi√≥n por computadora, y automatizaci√≥n de procesos. Tenemos experiencia en m√∫ltiples industrias incluyendo fintech, healthcare, retail, y manufactura.",
        metadata: {
            source: "team_expertise",
            category: "Equipo",
            company: "Lente AI",
            type: "expertise_equipo"
        }
    },
    {
        id: "lente_ai_concepts",
        content: "Conceptos clave de IA que manejamos: Machine Learning, Deep Learning, Procesamiento de Lenguaje Natural (NLP), Visi√≥n por Computadora, Redes Neuronales, Algoritmos de Clasificaci√≥n, Regresi√≥n, Clustering, y Aprendizaje No Supervisado.",
        metadata: {
            source: "ai_concepts",
            category: "Tecnolog√≠a",
            company: "Lente AI",
            type: "conceptos_ia"
        }
    },
    {
        id: "lente_case_studies",
        content: "Casos de √©xito: Implementamos un sistema de an√°lisis de sentimientos para una empresa de retail que mejor√≥ la satisfacci√≥n del cliente en un 40%. Desarrollamos un chatbot para atenci√≥n al cliente que redujo los tiempos de respuesta en un 60%. Creamos un sistema de detecci√≥n de fraudes que previno p√©rdidas por $2M anuales.",
        metadata: {
            source: "case_studies",
            category: "Casos de √âxito",
            company: "Lente AI",
            type: "casos_estudio"
        }
    }
];

// Funci√≥n para cargar datos usando el endpoint correcto
async function uploadDataToDatastore(datastoreId, data) {
    console.log(`üì§ Cargando ${data.length} documentos al datastore ${datastoreId}...`);
    
    // Intentar diferentes endpoints basados en la documentaci√≥n de la API
    
    // M√©todo 1: Usar /documents (endpoint espec√≠fico para documentos)
    console.log('\nüîÑ M√©todo 1: /documents...');
    try {
        const result1 = await braviloRequest(`/datastores/${datastoreId}/documents`, 'POST', {
            documents: data
        });
        console.log('‚úÖ M√©todo 1 exitoso');
        return true;
    } catch (error) {
        console.log('‚ùå M√©todo 1 fall√≥:', error.message);
    }
    
    // M√©todo 2: Usar /upsert (endpoint para actualizar/insertar)
    console.log('\nüîÑ M√©todo 2: /upsert...');
    try {
        const result2 = await braviloRequest(`/datastores/${datastoreId}/upsert`, 'POST', {
            documents: data
        });
        console.log('‚úÖ M√©todo 2 exitoso');
        return true;
    } catch (error) {
        console.log('‚ùå M√©todo 2 fall√≥:', error.message);
    }
    
    // M√©todo 3: Usar /data (endpoint alternativo)
    console.log('\nüîÑ M√©todo 3: /data...');
    try {
        const result3 = await braviloRequest(`/datastores/${datastoreId}/data`, 'POST', {
            data: data
        });
        console.log('‚úÖ M√©todo 3 exitoso');
        return true;
    } catch (error) {
        console.log('‚ùå M√©todo 3 fall√≥:', error.message);
    }
    
    // M√©todo 4: Usar /content (endpoint alternativo)
    console.log('\nüîÑ M√©todo 4: /content...');
    try {
        const result4 = await braviloRequest(`/datastores/${datastoreId}/content`, 'POST', {
            content: data
        });
        console.log('‚úÖ M√©todo 4 exitoso');
        return true;
    } catch (error) {
        console.log('‚ùå M√©todo 4 fall√≥:', error.message);
    }
    
    console.log('‚ùå Todos los m√©todos fallaron');
    return false;
}

// Funci√≥n para probar consulta despu√©s de carga
async function testQueryAfterUpload(datastoreId) {
    console.log('\nüîç Probando consulta despu√©s de la carga...');
    
    const testQueries = [
        "Lente AI",
        "consultor√≠a IA",
        "servicios inteligencia artificial",
        "machine learning",
        "chatbots",
        "procesamiento lenguaje natural"
    ];
    
    let foundResults = false;
    
    for (const query of testQueries) {
        console.log(`\nüîç Consultando: "${query}"`);
        try {
            const result = await braviloRequest(`/datastores/${datastoreId}/query`, 'POST', {
                query: query
            });
            
            if (result && Array.isArray(result)) {
                console.log(`‚úÖ Resultados: ${result.length}`);
                if (result.length > 0) {
                    console.log('üìÑ Documentos encontrados:');
                    result.forEach((item, index) => {
                        console.log(`   ${index + 1}. ${item.content?.substring(0, 150)}...`);
                        if (item.metadata) {
                            console.log(`      Metadata: ${JSON.stringify(item.metadata)}`);
                        }
                    });
                    foundResults = true;
                }
            } else {
                console.log('‚ùå No devolvi√≥ resultados v√°lidos');
            }
        } catch (error) {
            console.log('‚ùå Error en consulta:', error.message);
        }
    }
    
    return foundResults;
}

// Funci√≥n principal
async function main() {
    console.log('üöÄ Iniciando carga final de datos...\n');
    
    try {
        // 1. Listar datastores
        const datastores = await listDatastores();
        
        if (datastores.length === 0) {
            console.log('‚ùå No se encontraron datastores');
            return;
        }
        
        // 2. Seleccionar el primer datastore
        const selectedDatastore = datastores[0];
        console.log(`üéØ Usando datastore: ${selectedDatastore.name} (${selectedDatastore.id})`);
        console.log(`üìä Datasources existentes: ${selectedDatastore._count?.datasources || 0}`);
        
        // 3. Cargar datos usando el m√©todo correcto
        console.log('\nüì§ Cargando datos de Lente AI...');
        const uploadSuccess = await uploadDataToDatastore(selectedDatastore.id, lenteAIData);
        
        if (uploadSuccess) {
            console.log('\n‚úÖ Datos cargados exitosamente');
            
            // 4. Probar consulta
            const querySuccess = await testQueryAfterUpload(selectedDatastore.id);
            
            if (querySuccess) {
                console.log('\nüéâ ¬°√âXITO! Los datos est√°n funcionando correctamente');
                console.log('‚úÖ Los datos se cargaron y se pueden consultar');
            } else {
                console.log('\n‚ö†Ô∏è  Los datos se cargaron pero no se pueden consultar');
                console.log('üí° Esto puede indicar que necesitamos usar un endpoint diferente');
            }
        } else {
            console.log('\n‚ùå No se pudieron cargar los datos');
            console.log('üí° Revisar la documentaci√≥n de la API para el endpoint correcto');
        }
        
    } catch (error) {
        console.error('‚ùå Error en la carga:', error.message);
    }
}

// Ejecutar
if (require.main === module) {
    main().catch(console.error);
}

module.exports = {
    braviloRequest,
    listDatastores,
    uploadDataToDatastore,
    testQueryAfterUpload
};
